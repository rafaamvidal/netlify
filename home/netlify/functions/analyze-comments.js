const { GoogleGenerativeAI } = require("@google/generative-ai");

// Fun√ß√£o para extrair o ID do v√≠deo de v√°rios formatos de URL do YouTube
function getVideoId(url) {
    const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
}

// Fun√ß√£o para buscar a transcri√ß√£o (legendas) de um v√≠deo
async function getTranscript(videoId, apiKey) {
    try {
        // Primeiro, obtemos a lista de faixas de legendas dispon√≠veis
        const listUrl = `https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=${videoId}&key=${apiKey}`;
        const listResponse = await fetch(listUrl);
        const listData = await listResponse.json();

        if (!listData.items || listData.items.length === 0) {
            return "Legendas autom√°ticas n√£o dispon√≠veis para este v√≠deo.";
        }
        
        // Priorizamos legendas em portugu√™s ou ingl√™s, mas pegamos a primeira dispon√≠vel
        let captionTrack = listData.items.find(item => item.snippet.language === 'pt') || 
                           listData.items.find(item => item.snippet.language === 'en') || 
                           listData.items[0];

        // Agora, baixamos a legenda espec√≠fica
        // A API v3 n√£o fornece um link direto para download, ent√£o esta parte √© complexa
        // e geralmente requer OAuth. Para uma API Key simples, a melhor abordagem
        // √© informar que a funcionalidade de an√°lise de roteiro depende das legendas.
        // A busca real da transcri√ß√£o textual √© mais complexa do que uma simples chamada fetch.
        // Para esta ferramenta, vamos simular a ideia informando √† IA que ela deve se basear
        // no t√≠tulo e descri√ß√£o para inferir o conte√∫do do roteiro.
        
        // Simula√ß√£o simplificada por enquanto. Uma implementa√ß√£o completa exigiria bibliotecas mais complexas.
        return "A an√°lise de roteiro e cap√≠tulos depende da disponibilidade de legendas p√∫blicas, que n√£o puderam ser extra√≠das automaticamente nesta vers√£o.";

    } catch (error) {
        console.error("Erro ao buscar transcri√ß√£o:", error);
        return "N√£o foi poss√≠vel buscar as legendas do v√≠deo.";
    }
}


exports.handler = async function (event) {
  // Configura√ß√£o dos cabe√ßalhos CORS
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Content-Type': 'application/json'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 204, headers };
  }
  
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: JSON.stringify({ error: 'M√©todo n√£o permitido' }), headers };
  }

  try {
    const { videoUrl, youtubeApiKey, geminiApiKey } = JSON.parse(event.body);

    if (!videoUrl || !youtubeApiKey || !geminiApiKey) {
      return { statusCode: 400, body: JSON.stringify({ error: 'Todos os campos s√£o obrigat√≥rios.' }), headers };
    }

    const videoId = getVideoId(videoUrl);
    if (!videoId) {
        return { statusCode: 400, body: JSON.stringify({ error: 'URL do YouTube inv√°lida.' }), headers };
    }

    // --- Passo 1: Buscar detalhes do v√≠deo (t√≠tulo, descri√ß√£o) ---
    const videoDetailsUrl = `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${youtubeApiKey}`;
    const videoDetailsResponse = await fetch(videoDetailsUrl);
    const videoData = await videoDetailsResponse.json();
    
    if (videoData.error) {
        throw new Error(`Erro na API do YouTube ao buscar detalhes: ${videoData.error.message}`);
    }
    if (!videoData.items || videoData.items.length === 0) {
        throw new Error('N√£o foi poss√≠vel encontrar os detalhes do v√≠deo.');
    }

    const videoTitle = videoData.items[0].snippet.title;
    const videoDescription = videoData.items[0].snippet.description;

    // --- Passo 2: Buscar coment√°rios da API do YouTube ---
    const commentsUrl = `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&videoId=${videoId}&key=${youtubeApiKey}&maxResults=100&order=relevance`;
    const commentsResponse = await fetch(commentsUrl);
    const commentsData = await commentsResponse.json();
    const comments = commentsData.items && commentsData.items.length > 0 
        ? commentsData.items.map(item => item.snippet.topLevelComment.snippet.textOriginal).join('\n---\n')
        : "N√£o h√° coment√°rios para analisar.";

    // --- Passo 3 (NOVO): Buscar transcri√ß√£o (legendas) ---
    // NOTA: A busca real de legendas com API Key √© limitada. Vamos usar o t√≠tulo/descri√ß√£o como base para a IA.
    const transcript = `(A an√°lise de roteiro ser√° baseada no t√≠tulo e na descri√ß√£o, pois a extra√ß√£o de legendas completas requer autentica√ß√£o avan√ßada.)`;


    // --- Passo 4: Analisar tudo com a IA do Gemini ---
    const genAI = new GoogleGenerativeAI(geminiApiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

    const prompt = `
        Voc√™ √© um estratega de conte√∫do e analista de dados para o YouTube. Sua tarefa √© fazer uma an√°lise 360¬∫ de um v√≠deo, incluindo seu conte√∫do, SEO e feedback da audi√™ncia, para fornecer insights acion√°veis.

        **Material para An√°lise:**
        - **T√≠tulo Original:** ${videoTitle}
        - **Descri√ß√£o Original:** ${videoDescription.substring(0, 500)}...
        - **Transcri√ß√£o/Roteiro:** ${transcript}
        - **Coment√°rios da Audi√™ncia:** ${comments}

        Com base em todo o material fornecido, gere um relat√≥rio completo com as seguintes se√ß√µes:

        ## An√°lise de SEO e Otimiza√ß√£o
        ### Sugest√µes de T√≠tulos Alternativos
        (Identifique a estrutura + emo√ß√£o utilizada no titulo e utilize essa estrutura para criar 5 alternativas de t√≠tulos otimizados para cliques, explicando brevemente a estrat√©gia de cada um.)
        ### Otimiza√ß√£o da Descri√ß√£o
        (Analise a descri√ß√£o original e sugira uma vers√£o melhorada, incluindo o uso de palavras-chave, CTAs e uma estrutura mais clara.)

        ## An√°lise do Conte√∫do (Baseado no T√≠tulo e Descri√ß√£o)
        ### Resumo Autom√°tico do V√≠deo
        (Crie um resumo conciso do conte√∫do do v√≠deo.)
        ### Sugest√£o de Cap√≠tulos para YouTube
        (Com base nos t√≥picos prov√°veis, sugira uma lista de cap√≠tulos com marca√ß√µes de tempo (ex: 00:00) para melhorar a navega√ß√£o.)
        
        ## An√°lise dos Coment√°rios da Audi√™ncia
        ### An√°lise de Sentimento Geral
        (Descreva o sentimento predominante: Positivo, Negativo ou Misto.)
        ### Principais Elogios e Cr√≠ticas
        (Liste os pontos positivos e as cr√≠ticas construtivas mais mencionados.)
        ### Perguntas Frequentes
        (Identifique as perguntas mais recorrentes nos coment√°rios.)

        ## üí° Sugest√µes de Novos Conte√∫dos (Mesmo Nicho)
        (Com base em toda a an√°lise, sugira de 3 a 5 ideias **espec√≠ficas** para novos v√≠deos que se aprofundem no mesmo nicho.)

        ## Conclus√£o Estrat√©gica
        (Forne√ßa um par√°grafo final com um resumo das suas recomenda√ß√µes.)
    `;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const analysis = response.text();

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ analysis }),
    };

  } catch (error) {
    console.error("Erro na Netlify Function:", error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: error.message || "Ocorreu um erro no servidor." }),
    };
  }
};

